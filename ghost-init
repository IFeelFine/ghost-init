#!/usr/bin/env bash
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#                                                           #
#  888888 8888888              88 8888888                   #
#    88   88                   88 88    oo                  #
#    88   88                   88 88                        #
#    88   88888 .d8b.   .d8b.  88 88888 88 8888b.  .d8b.    #
#    88   88   d8P Y8b d8P Y8b 88 88    88 88  8b d8P Y8b   #
#    88   88   8888888 8888888 88 88    88 88  88 8888888   #
#    88   88   Y8b.    Y8b.    88 88    88 88  88 Y8b.      #
#  888888 88    ºY888P  ºY888P 88 88    88 88  88  ºY888P   #
#                           (c) 2015-2024 I Feel Fine, Inc. #
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
# ghost-init
# Github Repo: <ifeelfine/ghost-init>
# -------------
# Description: 
# Initializes the ghost directories and installs the s3
# storage plugin, if needed. Updates configMap variables to
# values from the 1Password secret.
# -------------
# Version 0.4.0 (see GH repo for release notes)

set -e # Exit on error

# Variable Declaration
# ====================
COMMANDS_MISSING=()                                     # Missing command list
COMMANDS="envsubst curl jq"                             # Linux commands needed for proper execution
CONFIG_FILE="/var/lib/ghost/config.production.json"     # Name of Ghost config file
DEBUG=${DEBUG:-false}                                   # Assume debug is off unless specifically set
GHOST_CONTENT=${GHOST_CONTENT:-/var/lib/ghost/content}  # Set Ghost content directory
STORAGE_PROVIDER=${STORAGE_PROVIDER:-}                  # Storage provider
SUB_CREATED=false                                       # Indicates a subdirectory was created
SUB_DIRS="apps data files images logs media public settings themes" # Directories within $GHOST_CONTENT

# Print Functions
# ===============
_echo() {
  /bin/echo -e "$(date +%Y-%m-%dT%H:%M:%S.%3N-%Z) $*"
}
_ok() {
  _echo "[ \033[0;32mOK\033[0m    ] $*"
}
_warn() {
  _echo "[ \033[1;33mWARN\033[0m  ] $*"
}
_error() {
  _echo "[ \033[0;31mERROR\033[0m ] $*"
}
_debug() {
  $DEBUG && _echo "[ DEBUG ] $*"
}

# Preamble
# ========
# Check to make sure that the required tools have been installed with the Dockerfile

for cmd in $COMMANDS; do
  if command -v $cmd >/dev/null; then
    _debug "$cmd is installed and available for use"
  else
    _debug "$cmd is required but not installed."
    COMMANDS_MISSING+=("$cmd")
  fi
done

if [ ${#COMMANDS_MISSING[@]} -gt 0 ]; then
  _error "The following required commands are missing:"
  printf '%s [ \033[0;31mERROR\033[0m ]   - %s\n' "$(date +%Y-%m-%dT%H:%M:%S-%Z)" "${COMMANDS_MISSING[@]}"
  _echo
  _error "Init script failed to complete."
  exit 2
fi

if [[ "${GHOST_CONTENT}" != /* ]]; then
  _error "GHOST_CONTENT must be an absolute path, but you provided \"${GHOST_CONTENT}\"."
  _echo
  _error "Init script failed to complete." && exit 1;
fi


# Main Content
# ============
_ok "Ghost init script started..."
_echo
_debug "\$GHOST_CONTENT=$GHOST_CONTENT"
_debug "\$USR_GRP=$USR_GRP"
_debug "\$CONFIG_FILE=$CONFIG_FILE"

# Step 1. Check if the content directory exists and if not create it
_echo "1. Checking if \"${GHOST_CONTENT}\" exists."

if [[ ! -d "${GHOST_CONTENT}" ]]; then
  _debug "${GHOST_CONTENT} doesn't exist. Creating it."
  if mkdir -p "${GHOST_CONTENT}"; then
    _ok "\"${GHOST_CONTENT}\" directory created."
  else
    _error "Failed to create \"${GHOST_CONTENT}\". Exiting..."
    _error
    _error "Init script failed to complete." && exit 1
  fi
else
  _ok "\"${GHOST_CONTENT}\" already exists."
fi
_echo

# Step 2. Ensure the sub directories of ${GHOST_CONTENT} exist.
_echo "2. Checking for subdirectories of \"${GHOST_CONTENT}\"."

_debug "Attempting to create subdirectories \"${SUB_DIRS// /, }\"..."
for DIR in $SUB_DIRS; do
  _debug "Checking if \"${GHOST_CONTENT}/${DIR}\" exists."
  if [[ ! -d "${GHOST_CONTENT}/${DIR}" ]]; then 
    if mkdir -p "${GHOST_CONTENT}/${DIR}"; then
      _debug "\"${GHOST_CONTENT}/${DIR}\ created"
      SUB_CREATED=true
    else 
    _error "Failed to create \"${GHOST_CONTENT}/${DIR}\". Exiting..."
    _error
    _error "Init script failed to complete." && exit 1
    fi
  else _debug "\"${GHOST_CONTENT}/${DIR}\" already exists."
  fi
done

if $SUB_CREATED; then
  _ok "Finished creating subdirectories of \"${GHOST_CONTENT}\""
else
  _ok "All subdirectories of \"${GHOST_CONTENT}\" already exist."
fi
_echo

# Step 3. Install storage adapter, if required
_echo "3. Checking for a storage adapter and installing the plugin, if required."
_debug "STORAGE_PROVIDER = ${STORAGE_PROVIDER}"

case "${STORAGE_PROVIDER,,}" in
  "s3")
    _ok "Using S3 for storage"
    _echo "3.1 Installing the ghos3 plug-in"
    _debug "Set working directory to /opt/node"
    cd /opt/node
    _debug "Running npm install ghos3."
    if npm install ghos3; then
      _ok "Installed ghos3 plug-in"
      if mkdir -p "${GHOST_CONTENT}/adapters/storage" && mv node_modules/ghos3 "${GHOST_CONTENT}/adapters/storage/s3"; then
        _debug "Moved ghos3 plug-in to \"${GHOST_CONTENT}/adapters/storage/s3\""
      else
        _error "Failed to copy ghos3 plug-in to \"${GHOST_CONTENT}/adapters/storage/s3\". Exiting..."
        _echo
        _error "Init script failed to complete." && exit 1
      fi
    else
      _error "Failed to install ghos3 plug-in. Exiting..." 
      _echo
      _error "Init script failed to complete." && exit 1
    fi
    ;;
  "")
    _warn "Storage driver not specified. Is this correct?"
    ;;
  *)
    _ok "Using local storage"
    _debug "No action required."
    ;;
esac

# Step 4. Perform ConfigMap variable substitution
_echo "4. Processing ConfigMap against environment variables."

_debug "Looking for config file at ${CONFIG_FILE}"
if [[ -f "$CONFIG_FILE" ]]; then
  _debug "Found config file at ${CONFIG_FILE}"
      # Replace environment variables in the config file
  # This will replace any ${VARIABLE} or $VARIABLE with its value
  if envsubst < "$CONFIG_FILE" > "${CONFIG_FILE}.tmp"; then                         #####  && mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"
    _debug "Variable substitution in ${CONFIG_FILE##*/} successful."
    if jq empty "${CONFIG_FILE}" 2>/dev/null; then
      if mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"; then
        :
      else
        _error "Failed to properly save ${CONFIG_FILE##*/}. Exiting..."
        _echo
        _error "Init script failed to complete." && exit 1
      fi
      _ok "Substitutions completed successfully. File is structurally correct."
    else
      _warn "Substitution completed successfully, but file is not structurally correct."
      _warn "Review environment variables to ensure they are stored correctly and try again."
      _echo
      _error "Init script failed to complete." && exit 1
    fi
    _debug "Updated configMap file:"
    _debug "$(cat ${CONFIG_FILE})"
  else
    _error "Failed to substitute environment variables in config file. Exiting..."
    _echo
    _error "Init script failed to complete." && exit 1
  fi
else
  _warn "Config file ${CONFIG_FILE##*/} not found in directory ${CONFIG_FILE%/*}/"
  _warn "Ghost may not function correctly."
  _warn "Review your manifest to ensure it is correct and properly references config variables."
  _warn "Init script failed to complete." && exit 78

fi

_ok "Init script completed successfully."
exit 0